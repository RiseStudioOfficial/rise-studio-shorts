name: Make & Upload Shorts
on:
  schedule:
    - cron: "0 7 * * *"   # 07:00 UTC ежедневно (10:00 Киев, лето)
  workflow_dispatch:

jobs:
  build-upload:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install deps
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg python3 python3-pip
          pip3 install google-api-python-client google-auth-oauthlib google-auth-httplib2

      - name: Ensure assets present (fetch if empty)
        env:
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          TARGET_BG_COUNT: "120"
          TARGET_MUSIC_COUNT: "30"
        run: |
          python3 - << 'PY'
import os, glob, sys
need_fetch=False
if len(glob.glob('assets/backgrounds/*'))<10: need_fetch=True
if len(glob.glob('assets/music/*.mp3'))<5: need_fetch=True
sys.exit(1) if need_fetch else sys.exit(0)
PY
        continue-on-error: true

      - name: Fetch assets (if needed)
        if: failure()
        env:
          PEXELS_API_KEY: ${{ secrets.PEXELS_API_KEY }}
          PIXABAY_API_KEY: ${{ secrets.PIXABAY_API_KEY }}
          TARGET_BG_COUNT: "120"
          TARGET_MUSIC_COUNT: "30"
        run: |
          pip3 install requests
          python3 scripts/fetch_assets.py
          python3 scripts/fetch_music.py

      - name: Render 3 videos + thumbnails
        env:
          LINK_HUB_URL: ${{ secrets.LINK_HUB_URL }}
        run: |
          mkdir -p out
          chmod +x scripts/render.sh scripts/render_thumb.sh
          count=0
          tail -n +2 data/quotes.csv | while IFS=',' read -r id text author tags; do
            [ $count -ge 3 ] && break
            BG=$(ls assets/backgrounds/* | shuf -n1)
            MU=$(ls assets/music/*.mp3 | shuf -n1)
            VOUT="out/short_${id}.mp4"
            TOUT="out/thumb_${id}.jpg"
            bash scripts/render.sh "$text" "$author" "$BG" "$MU" "$VOUT"
            bash scripts/render_thumb.sh "$text" "$author" "$BG" "$TOUT"
            python3 scripts/prepare_metadata.py "$text" "$author" "$tags" > "out/meta_${id}.txt"
            echo "$id" >> out/ids.txt
            count=$((count+1))
          done

      - name: Upload to YouTube (+ thumbnails)
        env:
          YT_CLIENT_ID: ${{ secrets.YT_CLIENT_ID }}
          YT_CLIENT_SECRET: ${{ secrets.YT_CLIENT_SECRET }}
          YT_REFRESH_TOKEN: ${{ secrets.YT_REFRESH_TOKEN }}
        run: |
          python3 - << 'PY'
import os, glob, time
from google.oauth2.credentials import Credentials
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
from googleapiclient.http import MediaFileUpload

creds = Credentials(None,
    refresh_token=os.environ['YT_REFRESH_TOKEN'],
    client_id=os.environ['YT_CLIENT_ID'],
    client_secret=os.environ['YT_CLIENT_SECRET'],
    token_uri='https://oauth2.googleapis.com/token')
creds.refresh(Request())
yt = build('youtube','v3',credentials=creds)

ids = [l.strip() for l in open('out/ids.txt','r',encoding='utf-8').read().splitlines() if l.strip()]
for id_ in ids:
    meta = f'out/meta_{id_}.txt'
    video = f'out/short_{id_}.mp4'
    thumb = f'out/thumb_{id_}.jpg'
    with open(meta,'r',encoding='utf-8') as f:
        parts = f.read().split('-----')
    title = parts[0].strip()
    desc  = parts[1].strip() + "\n#shorts"
    tags  = [t.strip() for t in parts[2].split(',') if t.strip()]
    body = dict(
        snippet=dict(title=title, description=desc, tags=tags, categoryId='22'),
        status=dict(privacyStatus='public', selfDeclaredMadeForKids=False)
    )
    media = MediaFileUpload(video, mimetype='video/*', resumable=False)
    req = yt.videos().insert(part="snippet,status", body=body, media_body=media)
    resp = req.execute()
    vid = resp.get('id')
    print("Uploaded video id:", vid)

    # Upload thumbnail
    if os.path.exists(thumb) and vid:
        tmedia = MediaFileUpload(thumb, mimetype='image/jpeg', resumable=False)
        yt.thumbnails().set(videoId=vid, media_body=tmedia).execute()
        print("Thumbnail set for:", vid)

    time.sleep(3)
PY
